// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	// NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
	// Further reading:
	// https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
	// https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
	url      = env("DATABASE_URL")
}

// PRIMARY TABLES

enum Role {
	SUPERADMIN
	ADMIN
	MENTOR
	STUDENT
}

model User {
	id            String    @id @default(cuid())
	telegramId   String?   @unique
	username      String?
	displayName  String
	email         String?   @unique
	emailVerified DateTime?
	image         String?

	role Role @default(STUDENT)

	studentProfileId Int?            @unique
	studentProfile   StudentProfile? @relation(fields: [studentProfileId], references: [id])

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt

  files File[]
}

model StudentProfile {
	id       Int    @id @default(autoincrement())
	fullname String
	phone    String

	practices Practice[]
	user      User?
}

enum PracticeStatus {
	UNVERIFIED
  VERIFIED
  REJECTED
  REPORT_PENDING
  REPORT_REJECTED
  REPORT_APPROVED
  DOCUMENTS_SIGNED
  COMPLETED
}

model Practice {
  id Int @id @default(autoincrement())
  type PracticeType @relation(fields: [typeId], references: [id])
  typeId Int
  status PracticeStatus @default(UNVERIFIED)
  rejectionMessage String?

  institute Institute? @relation(fields: [instituteId], references: [id])
  instituteId Int?
  speciality Specialty? @relation(fields: [specialityId], references: [id])
  specialityId Int?
  year Int

  startDate DateTime
  endDate DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student StudentProfile @relation(fields: [studentProfileId], references: [id])
  studentProfileId Int

  assignmentFile File? @relation(name: "AssignmentFile", fields: [assignmentFileId], references: [id])
  assignmentFileId Int?

  reportFile File? @relation(name: "ReportFile", fields: [reportFileId], references: [id])
  reportFileId Int?
}

model File {
  id Int @id @default(autoincrement())
  name String
  path String
  size Int
  type String

  reason String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  uploadedBy User @relation(fields: [uploadedById], references: [id])
  uploadedById String

  assignments Practice[] @relation("AssignmentFile")
  reports Practice[] @relation("ReportFile")
}

// INFO TABLES
model Institute {
	id   Int    @id @default(autoincrement())
	value String

  practices Practice[]
}

model Specialty {
	id   Int    @id @default(autoincrement())
	value String

  practices Practice[]
}

model PracticeType {
	id       Int        @id @default(autoincrement())
	value     String

  practices Practice[]
}
